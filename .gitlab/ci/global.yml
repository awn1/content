.trigger-slack-notification:
  stage: .post
  inherit: # see https://gitlab.com/gitlab-org/gitlab-runner/-/issues/27775
    variables: false
  trigger:
    strategy: depend
    include:
      - local: .gitlab/ci/slack-notify.yml

.setup-network-certs:
  - chmod 700 $NETWORK_SETUP
  - source $NETWORK_SETUP

.default-before-script:
  before_script:
    - source .gitlab/helper_functions.sh
    - !reference [.setup-network-certs]

.default-job-settings:
  interruptible: true
  extends:
    - .default-before-script

.poetry-install:
  - section_start "poetry-install" --collapsed
  # Install Poetry
  - curl -sSL https://install.python-poetry.org | python3 - --version "${POETRY_VERSION}"
  - poetry install
  - section_end "poetry-install"


.setup-artifactory:
  - section_start "Setup Artifactory" --collapsed
  - chmod 700 ${ARTIFACTORY_SETUP_SCRIPT}
  - source ${ARTIFACTORY_SETUP_SCRIPT}
  - section_end "Setup Artifactory"

.create_artifacts_folder:
  - section_start "Create Artifacts" --collapsed
  - |
    if [[ -n "${ARTIFACTS_FOLDER}" ]] && [[ ! -d "${ARTIFACTS_FOLDER}/logs" ]]; then
      echo "Creating Artifacts folder: ${ARTIFACTS_FOLDER} and it's log folder"
      mkdir -p -m 777 "${ARTIFACTS_FOLDER}/logs" # using the -p to create the logs folder as well.
    fi
  - section_end "Create Artifacts"

.granting_execute_permissions_on_files:
  - section_start "Granting execute permissions on files" --collapsed
  - chmod +x ./Tests/scripts/*
  - chmod +x ./Tests/Marketplace/*
  - chmod +x ./SecretActions/SecretsBuild/*
  - section_end "Granting execute permissions on files"


.check-is-force-merged-allowed:
  - section_start "Check is force merged allowed" --collapsed
  - |
    if echo "${CI_MERGE_REQUEST_LABELS}" | grep -q "Force Merge"; then
      RESULT=$(poetry run python3 -u ./Tests/scripts/check_is_force_merge_allowed.py -pid "$CI_PIPELINE_ID" -gt "$GITLAB_STATUS_TOKEN" -jn "$CI_JOB_NAME" --allowed-users-force "$ALLOWED_USERS_FORCE")
      ALLOWED_FORCE=$(echo $RESULT | cut -d ',' -f1)
      if [[ "$ALLOWED_FORCE" == "true"  ]]; then
        FORCE_MERGE_BY=$(echo $RESULT | cut -d ',' -f2)
        echo "This MR is a force merge by ${FORCE_MERGE_BY}"
        job-done
        exit 0
      else
        echo "The pipeline was not triggered by one of the managers"
      fi
    else
      echo "The MR is not a force merge"
    fi
  - section_end "Check is force merged allowed"