.generate-report-rule:
  rules:
    - if: $GENERATE_REPORT == "true"

.publish-report-rule:
  rules:
    - if: $PUBLISH_REPORT == "true"

.post-slack-rule:
  rules:
    - if: $POST_SLACK_RESULTS == "true"

GenerateCVEReport:
  tags:
    - gce
  variables:
    KUBERNETES_MEMORY_REQUEST: 8Gi
    KUBERNETES_MEMORY_LIMIT: 16Gi
    USE_INFRA_PYPROJECT_TOML: "true"
  stage: Generate Report
  extends:
    - .generate-report-rule
    - .default-job-settings
  script:
    - if [ ! -d "${CI_PROJECT_DIR}/artifacts/" ]; then mkdir -p "${CI_PROJECT_DIR}/artifacts/"; else echo "artifacts folder already exists"; fi
    - !reference [.set-twistlock-env]
    - !reference [.generate-content-graph]
    # The `create report` imports the demisto-sdk, which exists in the content virtual environment.
    - poetry run python3 -u "${CI_PROJECT_DIR}/Tests/docker/CVE_report/create_cve_report_json.py" --mitigated_cves_file "${CI_PROJECT_DIR}/artifacts/repositories/content-test-conf/docker/mitigated-cves.json" --days_to_consider_outdated $OUTDATED_DAYS_THRESHOLD --output_path "${CI_PROJECT_DIR}/cve_report.json" --days_ago_alert "${DAYS_AGO_CVE_ALERT}" -s "${RELEVANT_SEVERITY_LEVELS}" --content_dir "${CI_PROJECT_DIR}/content"
    # The `generate_html_from_report` imports Jinja, which exists in the infra virtual environment.
    - export PYTHONPATH="${CI_PROJECT_DIR}"
    - cd "${CI_PROJECT_DIR}"
    - poetry run python3 -u "${CI_PROJECT_DIR}/Tests/docker/CVE_report/generate_html_from_report.py" --json_report "${CI_PROJECT_DIR}/cve_report.json" --output_path "${CI_PROJECT_DIR}/cve_report.html"
    - echo "${CI_JOB_ID}" > job_id.txt
  artifacts:
    expire_in: 30 days
    paths:
      - cve_report.html
      - cve_report.json
      - job_id.txt
      - ${CI_PROJECT_DIR}/artifacts/*
    when: always

pages:
  stage: Pages
  extends:
    - .publish-report-rule
  needs:
    - GenerateCVEReport
  artifacts:
    expire_in: 30 days
    paths:
      - public
    when: always
  variables:
    ARTIFACTS_FOLDER: artifacts
    ARTIFACT_PATH: ${CI_PROJECT_DIR}/${ARTIFACTS_FOLDER}
  script:
    - mkdir -p public || echo "Public Folder already exist."
    - cp -f "${CI_PROJECT_DIR}/cve_report.html" "public/index.html"

PostReportSlack:
  stage: .post
  extends:
    - .post-slack-rule
    - .default-job-settings
  dependencies:
    - GenerateCVEReport
  variables:
    USE_INFRA_PYPROJECT_TOML: "true"
  script:
    - echo "Posting results to slack"
    - poetry run python3 -u "${CI_PROJECT_DIR}/Tests/docker/CVE_report/post_results_slack.py" --results "${CI_PROJECT_DIR}/cve_report.json" --token $SLACK_TOKEN --channel $SLACK_CHANNEL --ci_job_id "$(cat ${CI_PROJECT_DIR}/job_id.txt)" --artifact_host "${GITLAB_PAGES_URL}"
