.sdk-nightly-schedule-rule:
  rules:
    - if: '$CI_PIPELINE_SOURCE =~ /^(schedule|trigger)$/ && $DEMISTO_SDK_NIGHTLY == "true"'

# used for jobs which we want to run in a pipeline even when previous jobs in the pipeline fail e.g. Slack notification
.sdk-nightly-schedule-rule-always:
  rules:
    - if: '$CI_PIPELINE_SOURCE =~ /^(schedule|trigger)$/ && $DEMISTO_SDK_NIGHTLY == "true"'
      when: always

.change-file-ids: &change-file-ids
  - python3 ./Tests/scripts/sdk_nightly_change_json_file_fields.py Packs/HelloWorld/Classifiers/classifier-mapper-incoming-HelloWorldTest.json name

.upload-entities-to-cortex-xsoar: &upload-entities-to-cortex-xsoar
  - section_start "Upload Entities to Cortex XSOAR" --collapsed
  - demisto-sdk upload -i Packs/HelloWorld/Integrations/ --insecure
  - demisto-sdk upload -i Packs/HelloWorld/TestPlaybooks/playbook-HelloWorld-Test.yml --insecure
  - demisto-sdk upload -i Packs/HelloWorld/Layouts/layoutscontainer-Hello_World_Test_Layout.json --insecure
  - demisto-sdk upload -i Packs/HelloWorld/IncidentFields/incidentfield-Hello_World_IncidentField_Test.json --insecure
  - demisto-sdk upload -i Packs/HelloWorld/IncidentTypes/incidenttype-Hello_World_Alert_Test.json --insecure
  - demisto-sdk upload -i Packs/HelloWorld/Classifiers/classifier-mapper-incoming-HelloWorldTest.json --insecure
  - section_end "Upload Entities to Cortex XSOAR"

.run_test_content: &run_test_content
  - section_start "Run test-content" --collapsed
  - |
    if [[ -f "${ARTIFACTS_FOLDER_SERVER_TYPE}/conf.json" ]]; then
      cp "${ARTIFACTS_FOLDER_SERVER_TYPE}/conf.json" Tests/conf.json
    fi
  - |
    ./Tests/scripts/run_tests.sh || EXIT_CODE=$?
  - rm -f Tests/conf.json
  - section_end "Run test-content"

.run_end_to_end_tests: &run_end_to_end_tests
  - section_start "End to End Tests"  --collapsed
  - |
    mkdir $ARTIFACTS_FOLDER/demisto-sdk
    git clone -b ${SDK_REF} --single-branch --depth 1 https://github.com/demisto/demisto-sdk.git $ARTIFACTS_FOLDER/demisto-sdk
    python3 -m pytest "$ARTIFACTS_FOLDER/demisto-sdk/tests_end_to_end/${E2E_TEST_FOLDER}" || EXIT_CODE=$?
  - section_end "End to End Tests"

.copy_env_results: &copy_env_results
  - section_start "Copy env results to artifacts folder" --collapsed
  - |
    # workaround for the hard-coded value in the sdk CIAC-9091
    if [[ -e "${ARTIFACTS_FOLDER_SERVER_TYPE}/env_results.json" ]]; then
      cp "${ARTIFACTS_FOLDER_SERVER_TYPE}/env_results.json" "./artifacts/env_results.json"
    fi
    if [[ -e "${ARTIFACTS_FOLDER_SERVER_TYPE}/filter_file.txt" ]]; then
      cp "${ARTIFACTS_FOLDER_SERVER_TYPE}/filter_file.txt" "./artifacts/filter_file.txt"
    fi
  - section_end "Copy env results to artifacts folder"


.assert_test_content: &assert_test_content
  - section_start "Assert test-content" --collapsed
  - num_test_that_ran=$(grep -c "Test" "${ARTIFACTS_FOLDER_INSTANCE}/succeeded_tests.txt")
  - num_tests_that_should_run=$(grep -c "Test" "${ARTIFACTS_FOLDER_SERVER_TYPE}/filter_file.txt")
  - echo "Number of test-playbook tested - $num_test_that_ran "
  - echo "Number of tests that should have been tested - $num_tests_that_should_run "
  - |
    if [ $num_test_that_ran -eq $num_tests_that_should_run ]; then
      echo "test-content ran all of the collected test-playbooks."
    else
      echo "test-content did not ran all of the test-playbooks that were collected. exit with exit code 1"
      EXIT_CODE=1
    fi
  - section_end "Assert test-content"

.cleanup_after_test_content: &cleanup_after_test_content
  - section_start "Cleanup env results from artifacts folder" --collapsed
  - |
    # workaround for the hard-coded value in the sdk CIAC-9091
    if [[ -e "./artifacts/env_results.json" ]]; then
      rm -f "./artifacts/env_results.json"
    fi
    if [[ -e "./artifacts/filter_file.txt" ]]; then
      rm -f "./artifacts/filter_file.txt"
    fi
  - section_end "Cleanup env results from artifacts folder"

demisto-sdk-nightly:cloning-repositories:
  stage: .pre
  extends:
    - .sdk-nightly-schedule-rule
    - .cloning-repositories
  script:
    - job-done

demisto-sdk-nightly:test-infrastructure:
  needs:
    - demisto-sdk-nightly:cloning-repositories
  extends:
    - .sdk-nightly-schedule-rule
    - .test-infrastructure

demisto-sdk-nightly:run-pre-commit:
  needs:
    - demisto-sdk-nightly:cloning-repositories
  extends:
    - .run-pre-commit
    - .sdk-nightly-schedule-rule
  timeout: 11 hours

demisto-sdk-nightly:run-validations:
  needs:
    - demisto-sdk-nightly:cloning-repositories
  extends:
    - .run-validations
    - .sdk-nightly-schedule-rule

demisto-sdk-nightly:run-validations-new-validate-flow:
  needs:
    - demisto-sdk-nightly:cloning-repositories
  extends:
    - .run-validations-new-validate-flow
    - .sdk-nightly-schedule-rule

demisto-sdk-nightly:check-idset-dependent-commands:
  needs:
    - demisto-sdk-nightly:cloning-repositories
  tags:
    - gke
  extends:
    - .default-job-settings
    - .sdk-nightly-schedule-rule
  stage: unittests-and-validations
  inherit:
    variables: true
  variables:
    IS_NIGHTLY: "false"
    PRODUCT_TYPE: "XSOAR"
    SERVER_TYPE: "XSOAR"
    INSTANCE_ROLE: "Server Master"
    ARTIFACTS_FOLDER: "${ARTIFACTS_FOLDER_XSOAR}"
    ARTIFACTS_FOLDER_INSTANCE: "${ARTIFACTS_FOLDER}/instance_${INSTANCE_ROLE}"
    ARTIFACTS_FOLDER_SERVER_TYPE: "${ARTIFACTS_FOLDER}/server_type_${SERVER_TYPE}"
    ENV_RESULTS_PATH: "${ARTIFACTS_FOLDER_SERVER_TYPE}/env_results.json"
  script:
    - section_start "Secrets Detection" --collapsed
    - demisto-sdk secrets --post-commit --ignore-entropy
    - section_end "Secrets Detection"
    - section_start "Update Conf" --collapsed
    - cp "./Tests/conf.json" "${ARTIFACTS_FOLDER_SERVER_TYPE}/conf.json" # workaround for the hard-coded value in the sdk
    - section_end "Update Conf"
    - !reference [.create-id-set]
    - section_start "Activate GCloud Service Account" --collapsed
    - gcloud auth activate-service-account --key-file="$GCS_MARKET_KEY" >> "${ARTIFACTS_FOLDER}/logs/gcloud_auth.log" 2>&1
    - echo "successfully activated google cloud service account"
    - section_end "Activate GCloud Service Account"
    - section_start "Download private ID set" --collapsed
    - gsutil cp "gs://marketplace-dist/content/private_id_set.json" "${ARTIFACTS_FOLDER_SERVER_TYPE}/unified_id_set.json"
    - echo "successfully downloaded private ID set"
    - section_end "Download private ID set"
    - section_start "Revoking GCP Auth"
    - gcloud auth revoke "${GCS_ARTIFACTS_ACCOUNT_NAME}" >> "${ARTIFACTS_FOLDER}/logs/gcloud_auth.log" 2>&1
    - section_end "Revoking GCP Auth"
    - section_start "Merge public and private ID sets" --collapsed
    - demisto-sdk merge-id-sets -i1 "${ARTIFACTS_FOLDER_SERVER_TYPE}/id_set.json" -i2 "${ARTIFACTS_FOLDER_SERVER_TYPE}/unified_id_set.json" -o "${ARTIFACTS_FOLDER_SERVER_TYPE}/unified_id_set.json"
    - echo "successfully merged public and private ID sets"
    - section_end "Merge public and private ID sets"
    - section_start "Common Server Documentation" --collapsed
    - poetry install --with documentation
    - ./Documentation/commonServerDocs.sh
    - section_end "Common Server Documentation"
    - section_start "Collect Test List and Content Packs" --collapsed
    - python3 ./Tests/scripts/collect_tests/collect_tests.py -n "${IS_NIGHTLY}" --sdk-nightly "${DEMISTO_SDK_NIGHTLY}"
    - section_end "Collect Test List and Content Packs"
    - section_start "Calculate Packs Dependencies" --collapsed
    - demisto-sdk find-dependencies -idp "${ARTIFACTS_FOLDER_SERVER_TYPE}/id_set.json" --output-path "${ARTIFACTS_FOLDER_SERVER_TYPE}/packs_dependencies.json" --all-packs-dependencies
    - section_end "Calculate Packs Dependencies"
    - section_start "Cleanup env results from artifacts folder" --collapsed
    - job-done

demisto-sdk-nightly:xsoar-prepare-testing-bucket:
  needs:
    - demisto-sdk-nightly:cloning-repositories
  tags:
    - gke
  extends:
    - .default-job-settings
    - .sdk-nightly-schedule-rule
  variables:
    PRODUCT_TYPE: "XSOAR"
    SERVER_TYPE: "XSOAR"
    INSTANCE_ROLE: "Server Master"
    ARTIFACTS_FOLDER: "${ARTIFACTS_FOLDER_XSOAR}"
    ARTIFACTS_FOLDER_INSTANCE: "${ARTIFACTS_FOLDER_XSOAR}/instance_${INSTANCE_ROLE}"
    ARTIFACTS_FOLDER_SERVER_TYPE: "${ARTIFACTS_FOLDER_XSOAR}/server_type_${SERVER_TYPE}"
    IFRA_ENV_TYPE: "Server Master"
    MARKETPLACE_VERSION: "xsoar"
    MARKETPLACE_BUCKET: "$GCS_MARKET_BUCKET"
  cache:
    policy: pull-push
  stage: prepare-testing-bucket
  script:
    - !reference [.generic-prepare-testing-bucket, script]
    - job-done

demisto-sdk-nightly:mpv2-prepare-testing-bucket:
  needs:
    - demisto-sdk-nightly:cloning-repositories
  tags:
    - gke
  extends:
    - .default-job-settings
    - .sdk-nightly-schedule-rule
  variables:
    PRODUCT_TYPE: "XSIAM"
    SERVER_TYPE: "XSIAM"
    INSTANCE_ROLE: "XSIAM"
    ARTIFACTS_FOLDER: "${ARTIFACTS_FOLDER_MPV2}"
    ARTIFACTS_FOLDER_INSTANCE: "${ARTIFACTS_FOLDER_MPV2}/instance_${INSTANCE_ROLE}"
    ARTIFACTS_FOLDER_SERVER_TYPE: "${ARTIFACTS_FOLDER_MPV2}/server_type_${SERVER_TYPE}"
    MARKETPLACE_VERSION: "marketplacev2"
    MARKETPLACE_BUCKET: "$GCS_MARKET_V2_BUCKET"
    PRODUCT_NAME: "Cortex XSIAM"
    IFRA_ENV_TYPE: "Server Master"
  cache:
    policy: pull-push
  stage: prepare-testing-bucket
  script:
    - !reference [.generic-prepare-testing-bucket, script]
    - job-done

demisto-sdk-nightly:xpanse-prepare-testing-bucket:
  needs:
    - demisto-sdk-nightly:cloning-repositories
  tags:
    - gke
  extends:
    - .default-job-settings
    - .sdk-nightly-schedule-rule
  variables:
    PRODUCT_TYPE: "XPANSE"
    SERVER_TYPE: "XPANSE"
    ARTIFACTS_FOLDER: "${ARTIFACTS_FOLDER_XPANSE}"
    ARTIFACTS_FOLDER_SERVER_TYPE: "${ARTIFACTS_FOLDER_XPANSE}/server_type_${SERVER_TYPE}"
    MARKETPLACE_VERSION: "xpanse"
    PRODUCT_NAME: "Cortex XPANSE"
    MARKETPLACE_BUCKET: "$GCS_MARKET_XPANSE_BUCKET"
    IFRA_ENV_TYPE: "Server Master"
  cache:
    policy: pull-push
  stage: prepare-testing-bucket
  script:
    - !reference [.generic-prepare-testing-bucket, script]
    - job-done

demisto-sdk-nightly:xsoar-saas-prepare-testing-bucket:
  needs:
    - demisto-sdk-nightly:cloning-repositories
  tags:
    - gke
  extends:
    - .default-job-settings
    - .sdk-nightly-schedule-rule
  variables:
    IFRA_ENV_TYPE: "Server Master"
    PRODUCT_TYPE: "XSOAR"
    SERVER_TYPE: "XSOAR SAAS"
    ARTIFACTS_FOLDER: "${ARTIFACTS_FOLDER_XSOAR}"
    ARTIFACTS_FOLDER_SERVER_TYPE: "${ARTIFACTS_FOLDER_XSOAR}/server_type_${SERVER_TYPE}"
    MARKETPLACE_VERSION: "xsoar_saas"
    MARKETPLACE_BUCKET: "$GCS_MARKET_XSOAR_SAAS_BUCKET"
  cache:
    policy: pull-push
  stage: prepare-testing-bucket
  script:
    - !reference [.generic-prepare-testing-bucket, script]
    - job-done

demisto-sdk-nightly:test-upload-flow:
  needs:
    - demisto-sdk-nightly:cloning-repositories
  tags:
    - gke
  extends:
    - .default-job-settings
    - .sdk-nightly-schedule-rule
  variables:
    ALL_BUCKETS: "$GCS_MARKET_BUCKET_DEV,$GCS_MARKET_V2_BUCKET_DEV,$GCS_MARKET_XSOAR_SAAS_BUCKET_DEV"
  stage: unittests-and-validations
  script:
    - !reference [test-upload-flow, script]

demisto-sdk-nightly:run-end-to-end-tests-general:
  tags:
    - gce # can't run docker in docker on gke
  extends:
    - .default-job-settings
    - .sdk-nightly-schedule-rule-always
    - .docker_services
  variables:
    DOCKER_HOST: tcp://docker:2375
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: ""
    PRODUCT_TYPE: "XSOAR"
    SERVER_TYPE: "XSOAR"
    INSTANCE_ROLE: "Server Master"
    ARTIFACTS_FOLDER: "${ARTIFACTS_FOLDER_XSOAR}"
    ARTIFACTS_FOLDER_INSTANCE: "${ARTIFACTS_FOLDER}/instance_${INSTANCE_ROLE}"
    ARTIFACTS_FOLDER_SERVER_TYPE: "${ARTIFACTS_FOLDER}/server_type_${SERVER_TYPE}"
    ENV_RESULTS_PATH: "${ARTIFACTS_FOLDER_SERVER_TYPE}/env_results.json"
    E2E_TEST_FOLDER: "general"
  needs: ["demisto-sdk-nightly:xsoar-prepare-testing-bucket"]
  stage: run-instances
  script:
    - EXIT_CODE=0
    - !reference [.ssh-config-setup]

    - section_start "End to End Tests"  --collapsed
    - |
      mkdir $ARTIFACTS_FOLDER/demisto-sdk
      git clone -b ${SDK_REF} --single-branch --depth 1 https://github.com/demisto/demisto-sdk.git $ARTIFACTS_FOLDER/demisto-sdk

      python3 -m pytest ${ARTIFACTS_FOLDER}/demisto-sdk/tests_end_to_end/${E2E_TEST_FOLDER} || EXIT_CODE=$?
    - section_end "End to End Tests"

    - job-done
    - exit $EXIT_CODE
  after_script:
    - !reference [.default-after-script]

demisto-sdk-nightly:run-end-to-end-tests-xsoar:
  tags:
    - gce # can't run docker in docker on gke
  extends:
    - .default-job-settings
    - .sdk-nightly-schedule-rule-always
    - .docker_services
  variables:
    DOCKER_HOST: tcp://docker:2375
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: ""
    PRODUCT_TYPE: "XSOAR"
    SERVER_TYPE: "XSOAR"
    INSTANCE_ROLE: "Server Master"
    ARTIFACTS_FOLDER: "${ARTIFACTS_FOLDER_XSOAR}"
    ARTIFACTS_FOLDER_INSTANCE: "${ARTIFACTS_FOLDER}/instance_${INSTANCE_ROLE}"
    ARTIFACTS_FOLDER_SERVER_TYPE: "${ARTIFACTS_FOLDER}/server_type_${SERVER_TYPE}"
    ENV_RESULTS_PATH: "${ARTIFACTS_FOLDER_SERVER_TYPE}/env_results.json"
    FAIL_ON_ERROR: "true"
    E2E_TEST_FOLDER: "xsoar"
    MARKETPLACE_NAME: "xsoar"
  needs: ["demisto-sdk-nightly:xsoar-prepare-testing-bucket"]
  stage: run-instances
  script:
    - EXIT_CODE=0
    - !reference [.ssh-config-setup]

    - !reference [.copy_env_results]

    - section_start "Wait Until Server Ready" --collapsed
    - python3 ./Tests/scripts/wait_until_server_ready.py  -n "${IS_NIGHTLY}" --instance-role "${INSTANCE_ROLE}" || EXIT_CODE=$?
    - section_end "Wait Until Server Ready"

    - !reference [.secrets-fetch]

    - section_start "End to End Tests"  --collapsed
    - |
      mkdir $ARTIFACTS_FOLDER/demisto-sdk
      git clone -b ${SDK_REF} --single-branch --depth 1 https://github.com/demisto/demisto-sdk.git $ARTIFACTS_FOLDER/demisto-sdk

      unset DEMISTO_API_KEY
      export DEMISTO_BASE_URL="https://$(cat "${ENV_RESULTS_PATH}" | jq -r '.[0].InstanceDNS')"
      echo "Server URL: $DEMISTO_BASE_URL"
      python3 -m pytest ${ARTIFACTS_FOLDER}/demisto-sdk/tests_end_to_end/${E2E_TEST_FOLDER} || EXIT_CODE=$?
    - section_end "End to End Tests"

    - !reference [.install_packs_by_machines]

    - section_start "Wait Until Server Ready"  --collapsed
    - echo Going to sleep for 15 minutes to allow server finish indexing
    - sleep-with-progress 900 30 "Sleeping... " 150
    - echo "Done sleeping!"
    - section_end "Wait Until Server Ready"

    - !reference [.run_test_content]

    - !reference [.assert_test_content]

    - !reference [.cleanup_after_test_content]

    - job-done
    - exit $EXIT_CODE
  after_script:
    - !reference [.default-after-script]
    - !reference [.install_ssh_keys]
    - !reference [.ssh-config-setup]

    - !reference [.destroy_xsoar_instances]

demisto-sdk-nightly:run-end-to-end-tests-xsiam:
  rules:
    - when: never
  tags:
    - gce
  extends:
    - .default-job-settings
    - .sdk-nightly-schedule-rule-always
    - .docker_services
  variables:
      CLOUD_MACHINES_TYPE: "build"
      CLOUD_MACHINES_COUNT: 1
      INSTANCE_ROLE: "xsiam"
      CLEAN_MACHINE_NEEDED: "true"
      GCS_QUEUE_FILE: "queue-ga"
      GCS_LOCKS_PATH: "content-locks/locks-xsiam-ga"
      CLOUD_SERVERS_FILE: "xsiam_servers_path"
      XSIAM_SERVERS_PATH: "xsiam_servers.json"
      ARTIFACTS_FOLDER: "${ARTIFACTS_FOLDER_MPV2}"
      ARTIFACTS_FOLDER_INSTANCE: "${ARTIFACTS_FOLDER_MPV2}/instance_${INSTANCE_ROLE}"
      GCS_MARKET_BUCKET: "${GCS_MARKET_V2_BUCKET}"
      GCS_SOURCE_BUCKET: "$GCS_PRODUCTION_V2_BUCKET"
      GCS_MACHINES_BUCKET: "marketplace-v2-dist-dev/upload-flow/builds-xsiam"
      SERVER_TYPE: "XSIAM"
      MARKETPLACE_NAME: "marketplacev2"
      NON_REMOVABLE_PACKS: "Base"
      EXTRACT_PRIVATE_TESTDATA: "true"
      FAIL_ON_ERROR: "true"
      E2E_TEST_FOLDER: "xsiam"
      PRODUCT_TYPE: "XSIAM"
      ARTIFACTS_FOLDER_SERVER_TYPE: "${ARTIFACTS_FOLDER_MPV2}/server_type_${SERVER_TYPE}"
      ENV_RESULTS_PATH: "${ARTIFACTS_FOLDER_SERVER_TYPE}/env_results.json"
  needs: ["demisto-sdk-nightly:mpv2-prepare-testing-bucket"]
  stage: run-instances
  script:
    - EXIT_CODE=0

    - !reference [.copy_env_results]

    - !reference [.secrets-fetch]
    - !reference [.lock-machine]

    - !reference [.export_cloud_machine_constants]

    - !reference [.run_end_to_end_tests]

    - !reference [.install_packs_by_machines]

    - !reference [.run_test_content]

    - !reference [.assert_test_content]

    - !reference [.cleanup_after_test_content]

    - !reference [.cloud-machine-information]
    - job-done
    - exit $EXIT_CODE

  after_script:
    - source .gitlab/helper_functions.sh
    - !reference [.clean-machine]
    - !reference [.unlock-machine]


demisto-sdk-nightly:run-end-to-end-tests-xsoar-saas:
  rules:
    - when: never
  tags:
    - gce
  extends:
    - .default-job-settings
    - .sdk-nightly-schedule-rule-always
    - .docker_services
  variables:
    CLOUD_MACHINES_TYPE: "build"
    CLOUD_MACHINES_COUNT: 1
    INSTANCE_ROLE: "xsoar_saas"
    CLEAN_MACHINE_NEEDED: "true"
    SERVER_TYPE: "XSOAR SAAS"
    GCS_QUEUE_FILE: "queue-ga"
    GCS_LOCKS_PATH: "content-locks/locks-xsoar-ng"
    CLOUD_SERVERS_FILE: "xsoar_ng_servers_path"
    GCS_SOURCE_BUCKET: "${GCS_PRODUCTION_XSOAR_SAAS_BUCKET}"
    ARTIFACTS_FOLDER: "${ARTIFACTS_FOLDER_XSOAR}"
    ARTIFACTS_FOLDER_INSTANCE: "${ARTIFACTS_FOLDER}/instance_${INSTANCE_ROLE}"
    GCS_MACHINES_BUCKET: "marketplace-saas-dist-dev/upload-flow/builds-xsoar-ng"
    MARKETPLACE_NAME: "xsoar_saas"
    NON_REMOVABLE_PACKS: "Base"
    FAIL_ON_ERROR: "true"
    E2E_TEST_FOLDER: "xsoar-saas"
    PRODUCT_TYPE: "XSOAR"
    ARTIFACTS_FOLDER_SERVER_TYPE: "${ARTIFACTS_FOLDER_XSOAR}/server_type_${SERVER_TYPE}"
    ENV_RESULTS_PATH: "${ARTIFACTS_FOLDER_SERVER_TYPE}/env_results.json"
  needs: ["demisto-sdk-nightly:xsoar-saas-prepare-testing-bucket"]
  stage: run-instances
  script:
    - EXIT_CODE=0

    - !reference [.copy_env_results]

    - !reference [.secrets-fetch]
    - !reference [.lock-machine]

    - !reference [.uninstall-packs-and-reset-bucket-cloud]
    - !reference [.export_cloud_machine_constants]

    - !reference [.run_end_to_end_tests]

    - !reference [.install_packs_by_machines]

    - !reference [.run_test_content]

    - !reference [.assert_test_content]

    - !reference [.cleanup_after_test_content]

    - !reference [.cloud-machine-information]
    - job-done
    - exit $EXIT_CODE

  after_script:
    - source .gitlab/helper_functions.sh
    - !reference [.unlock-machine]
    - !reference [.clean-machine]

demisto-sdk-nightly:jobs-done-check:
  extends:
    - .jobs-done-check
    - .sdk-nightly-schedule-rule
  needs:
    - demisto-sdk-nightly:cloning-repositories
    - demisto-sdk-nightly:run-pre-commit
    - demisto-sdk-nightly:run-validations
    - demisto-sdk-nightly:run-validations-new-validate-flow
    - demisto-sdk-nightly:test-infrastructure
    - demisto-sdk-nightly:test-upload-flow
    - demisto-sdk-nightly:check-idset-dependent-commands
    - demisto-sdk-nightly:mpv2-prepare-testing-bucket
    - demisto-sdk-nightly:xsoar-prepare-testing-bucket
    - demisto-sdk-nightly:xpanse-prepare-testing-bucket
    - demisto-sdk-nightly:xsoar-saas-prepare-testing-bucket
    - demisto-sdk-nightly:run-end-to-end-tests-general
    - demisto-sdk-nightly:run-end-to-end-tests-xsoar
  variables:
    WORKFLOW: 'Demisto SDK Nightly'

demisto-sdk-nightly:fan-in:
  tags:
    - gke
  stage: fan-in
  extends:
    - .sdk-nightly-schedule-rule-always
  script:
    - echo "fan in"

demisto-sdk-nightly:trigger-slack-notify:
  extends:
    - .trigger-slack-notification
    - .sdk-nightly-schedule-rule-always
  variables:  # Passes the environment variable from the parent pipeline to the child which can be useful for cases when triggering pipeline with alternate env variable value passed in the API call.
    PIPELINE_TO_QUERY: $CI_PIPELINE_ID
    JOB_NAME: "demisto-sdk-nightly:fan-in"
    WORKFLOW: "Demisto SDK Nightly"
    DEMISTO_SDK_NIGHTLY: $DEMISTO_SDK_NIGHTLY
    OVERRIDE_SDK_REF: $OVERRIDE_SDK_REF
    SDK_REF: $SDK_REF
    SLACK_CHANNEL: $SLACK_CHANNEL
    SLACK_PARENT_PIPELINE_ID: $SLACK_PARENT_PIPELINE_ID
    SLACK_PARENT_PROJECT_ID: $SLACK_PARENT_PROJECT_ID
    SLACK_JOB: "true"
    SLACK_ALLOW_FAILURE: "false"
    CI_PROJECT_ID: $CI_PROJECT_ID
    CI_SERVER_URL: $CI_SERVER_URL
    JIRA_SERVER_URL: $JIRA_SERVER_URL
    JIRA_VERIFY_SSL: $JIRA_VERIFY_SSL
    JIRA_API_KEY: $JIRA_API_KEY
    JIRA_PROJECT_ID: $JIRA_PROJECT_ID
    JIRA_ISSUE_UNRESOLVED_TRANSITION_NAME: $JIRA_ISSUE_UNRESOLVED_TRANSITION_NAME
    CURRENT_BRANCH_NAME: $INFRA_BRANCH
