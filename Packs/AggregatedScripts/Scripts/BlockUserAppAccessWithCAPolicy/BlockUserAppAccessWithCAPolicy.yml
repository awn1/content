commonfields:
  id: BlockUserAppAccessWithCAPolicy
  version: 23
vcShouldKeepItemLegacyProdMachine: false
name: BlockUserAppAccessWithCAPolicy
script: |
  import json

  def get_user_object_id(username):
      demisto.info(f"[DEBUG] Fetching user object ID for: {username}")
      res = demisto.executeCommand("msgraph-user-get", {"user": username})
      demisto.info(f"[DEBUG] User lookup response: {json.dumps(res[0], indent=2)[:1000]}")
      if res[0].get("Type") == 4:
          return_error(f"Failed to get user: {username}. Error: {res[0].get('Contents')}")
      return res[0]["Contents"].get("id")

  def get_app_id(app_name):
      demisto.info(f"[DEBUG] Fetching app ID for: {app_name}")
      res = demisto.executeCommand("msgraph-apps-service-principal-list", {"limit": 0})
      demisto.info(f"[DEBUG] Service principal list response: {json.dumps(res[0], indent=2)[:1000]}")
      if res[0].get("Type") == 4:
          return_error(f"Failed to list service principals. Error: {res[0].get('Contents')}")

      contents = res[0].get("Contents")
      apps = []
      if isinstance(contents, dict):
          apps = contents.get("MSGraphApplication", [])
      elif isinstance(contents, list):
          apps = contents
      else:
          demisto.info(f"[DEBUG] Unexpected service principal list structure: {contents}")
          return_error("Unexpected format in service principal list response.")

      matching_apps = [a for a in apps if a.get("displayName") == app_name]
      if not matching_apps:
          return_error(f"Application '{app_name}' not found. All apps: {[a.get('displayName') for a in apps]}")
      return matching_apps[0].get("appId")

  def main():
      policy_name = demisto.args().get("policy_name")
      username = demisto.args().get("username")
      app_name = demisto.args().get("app_name")

      if not policy_name or not username or not app_name:
          return_error("Missing required arguments: policy_name, username, app_name")

      user_id = get_user_object_id(username)
      app_id = get_app_id(app_name)

      query = f"displayName eq '{policy_name}'"
      demisto.info(f"[DEBUG] Querying for existing CA policy: {query}")
      res = demisto.executeCommand("msgraph-identity-ca-policies-list", {"filter": query})
      demisto.info(f"[DEBUG] CA policy list raw response: {json.dumps(res[0], indent=2)[:1000]}")

      raw = res[0].get("Contents") or res[0].get("EntryContext", {}).get("MSGraphConditionalAccessPolicy")
      if isinstance(raw, dict):
          policies = raw.get("value", [])
      elif isinstance(raw, list):
          policies = raw
      else:
          demisto.info(f"[DEBUG] Unexpected CA policy list structure: {raw}")
          policies = []

      if policies:
          policy = policies[0]
          policy_id = policy["id"]
          include_users = policy.get("conditions", {}).get("users", {}).get("includeUsers", [])
          if user_id not in include_users:
              include_users.append(user_id)
              policy["conditions"]["users"]["includeUsers"] = include_users
              demisto.info(f"[DEBUG] Updating CA policy to include user: {user_id}")
              update_res = demisto.executeCommand("msgraph-identity-ca-policy-update", {
                  "policy_id": policy_id,
                  "policy": json.dumps(policy)
              })
              demisto.info(f"[DEBUG] CA policy update response: {json.dumps(update_res[0], indent=2)[:1000]}")
              if update_res[0].get("Type") == 4:
                  return_error(f"Failed to update CA policy. Error: {update_res[0].get('Contents')}")
              return_results(f"User `{username}` added to policy `{policy_name}`.")
          else:
              return_results(f"User `{username}` is already included in policy `{policy_name}`.")
      else:
          demisto.info("[DEBUG] No matching CA policy found. Creating new one.")
          new_policy = {
              "displayName": policy_name,
              "state": "enabled",
              "conditions": {
                  "users": {
                      "includeUsers": [user_id]
                  },
                  "applications": {
                      "includeApplications": [app_id]
                  }
              },
              "grantControls": {
                  "operator": "OR",
                  "builtInControls": ["block"]
              },
              "sessionControls": {}
          }
          create_res = demisto.executeCommand("msgraph-identity-ca-policy-create", {
              "policy": json.dumps(new_policy)
          })
          demisto.info(f"[DEBUG] CA policy creation response: {json.dumps(create_res[0], indent=2)[:1000]}")
          if create_res[0].get("Type") == 4:
              return_error(f"Failed to create new CA policy. Error: {create_res[0].get('Contents')}")
          return_results(f"Created new policy `{policy_name}` to block user `{username}` from app `{app_name}`.")

  main()
type: python
tags:
- Azure
- Conditional Access
- Access Control
comment: Checks if a CA policy exists. If yes, adds the user if needed. If no, creates
  a new CA policy to block access to a specific app for a user.
enabled: true
args:
- name: policy_name
  required: true
  description: The display name of the Conditional Access policy to check or create.
- name: username
  required: true
  description: The UPN of the user to block.
- name: app_name
  required: true
  description: The name of the app to block access to.
scripttarget: 0
subtype: python3
pswd: ""
runonce: false
dockerimage: demisto/python3:3.12.8.3296088
runas: DBotWeakRole
engineinfo: {}
mainengineinfo: {}
