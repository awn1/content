commonfields:
  id: CloseInvestigationAsDuplicate
  version: -1
name: CloseInvestigationAsDuplicate
script: >
  register_module_line('CloseInvestigationAsDuplicate', 'start', __line__())

  demisto.debug('pack name = Common Scripts, pack version = 1.19.29')





  NO_INCIDENT_CLOSED_MSG = '0 incidents marked as duplicates'

  INFORMATIVE_MSG_FOR_USER = 'The incident was not closed. Check if the incident is missing a mandatory field by its type.'



  def is_incident_not_closed(response):
      """Check if the incident was closed based on the response contents."""
      content = response[0].get('Contents') or response[0].get('contents')
      return content == NO_INCIDENT_CLOSED_MSG


  def main():
      current_incident_id = demisto.incidents()[0]['id']
      duplicate_id = demisto.args()['duplicateId']
      res = demisto.executeCommand("linkIncidents", {"incidentId": duplicate_id, "linkedIncidentIDs": current_incident_id,
                                                     "action": "duplicate"})
      raise_error = argToBoolean(demisto.args().get('raise_error', False))
      if is_incident_not_closed(res):
          if raise_error:
              return_error(INFORMATIVE_MSG_FOR_USER)
          else:
              return_results(INFORMATIVE_MSG_FOR_USER)
      else:
          demisto.results(res)


  if __name__ in ('__main__', '__builtin__', 'builtins'):
      main()

  register_module_line('CloseInvestigationAsDuplicate', 'end', __line__())
type: python
subtype: python3
tags:
- dedup
comment: Close the current investigation as duplicate to other investigation.
enabled: true
args:
- name: duplicateId
  required: true
  description: Duplicate incident id.
- auto: PREDEFINED
  defaultValue: 'false'
  description: Whether if to raise error or return result with an error.
  name: raise_error
  predefined:
  - 'true'
  - 'false'
scripttarget: 0
fromversion: 5.0.0
dockerimage: demisto/python3:3.12.8.1983910
tests:
- No tests (auto formatted)
nativeimage:
- '8.8'
- '8.6'
