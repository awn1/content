commonfields:
  id: SetAndHandleEmpty
  version: -1
name: SetAndHandleEmpty
fromversion: 5.0.0
type: javascript
tags:
- Utility
comment: "Set a value in context under the key you entered. If no value is entered, the script doesn't do anything.\n\nThis automation runs using the default Limited User role, unless you explicitly change the permissions.\nFor more information, see the section about permissions here:\n- For Cortex XSOAR 6 see https://docs-cortex.paloaltonetworks.com/r/Cortex-XSOAR/6.x/Cortex-XSOAR-Playbook-Design-Guide/Automations \n- For Cortex XSOAR 8 Cloud see https://docs-cortex.paloaltonetworks.com/r/Cortex-XSOAR/8/Cortex-XSOAR-Cloud-Documentation/Create-a-script\n- For Cortex XSOAR 8.7 On-prem see https://docs-cortex.paloaltonetworks.com/r/Cortex-XSOAR/8.7/Cortex-XSOAR-On-prem-Documentation/Create-a-script"
enabled: true
args:
- name: key
  required: true
  default: true
  description: The key to set in context.
  isArray: true
- name: value
  description: The value of the key to set in context. The value is usually a DQ expression. Can be an array.
  isArray: true
- name: append
  auto: PREDEFINED
  predefined:
  - 'true'
  - 'false'
  description: Whether to append the new context key to the existing context key. If "false", then the existing context key will be overwritten with the new context key.
  defaultValue: 'true'
- name: stringify
  auto: PREDEFINED
  predefined:
  - 'true'
  - 'false'
  description: Whether to save the argument as a string. The default value is "false".
  defaultValue: 'false'
- name: force
  auto: PREDEFINED
  predefined:
  - 'true'
  - 'false'
  description: Whether to force the creation of the context. The default value is "false".
  defaultValue: 'false'
scripttarget: 0
script: >
  // pack version: 1.19.29

  function getValue(value, stringify = false) {
      if (stringify) {
          if (value === null || value === undefined) {
              return '';
          }
          return String(value);
      } else if (!value || !(typeof value === 'string')) {
          return value;
      } else {
          try {
              return JSON.parse(value);
          } catch (error) {
              return value;
          }
      }
  }


  function main() {
      const keys = argToList(args.key);
      let value = args.value;
      const force = args.force === 'true';
      value = getValue(value, args.stringify === 'true');

      let results = [];
      for (let i = 0; i < keys.length; i++) {
          let humanReadable = '';
          let contextEntry = {};

          if (value || force) {
              humanReadable = `Key ${keys[i]} set`;
              contextEntry = { [keys[i]]: value };
          } else {
              humanReadable = 'value is None';
          }

          if (args.append === 'false' && Object.keys(contextEntry).length > 0) {
              executeCommand('DeleteContext', { key: keys[i], subplaybook: 'auto' });
          }
          results.push({
              Type: entryTypes.note,
              EntryContext: contextEntry,
              ContentsFormat: formats.json,
              Contents: humanReadable,
              HumanReadable: humanReadable
          });
      };
      return results;
  }


  try {
      return main();
  } catch (error) {
      throw 'Error occurred while running the script:\n' + error;
  }
tests:
- SetAndHandleEmpty test
- SetAndHandleEmpty_Test
