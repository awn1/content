commonfields:
  id: GenerateRandomString
  version: -1
name: GenerateRandomString
comment: Generates random string
script: >
  register_module_line('GenerateRandomString', 'start', __line__())

  demisto.debug('pack name = Common Scripts, pack version = 1.19.29')



  import random

  import string



  MAX_LENGTH = 10000



  def set_length(length):
      if length <= 0:
          return_error("Length must be greater than 0. Maximum value is {}.".format(MAX_LENGTH))

      return min(length, MAX_LENGTH)


  def set_characters(characters: str, digits: bool, lowercase: bool, punctuation: bool, uppercase: bool):
      if not any([uppercase, lowercase, digits, punctuation]):
          return_error("Punctuation, Digits, Uppercase or Lowercase must be True.")

      characters += string.ascii_lowercase if lowercase else ''
      characters += string.ascii_uppercase if uppercase else ''
      characters += string.digits if digits else ''
      characters += string.punctuation if punctuation else ''
      return characters


  def create_password(characters, length):
      password = ""
      for x in range(0, length):
          password += random.SystemRandom(random.seed(time.time())).choice(characters)  # type: ignore

      entry_context = {'RandomString': password}
      raw = json.loads(json.dumps(entry_context))
      results = CommandResults(content_format=EntryFormat.JSON,
                               entry_type=EntryType.NOTE,
                               outputs=entry_context,
                               readable_output=tableToMarkdown('RandomString Generated.', raw) if raw else 'No result were found',
                               raw_response=raw)
      return results


  def main():
      args = demisto.args()

      punctuation = argToBoolean(args["Punctuation"])
      lowercase = argToBoolean(args["Lowercase"])
      uppercase = argToBoolean(args["Uppercase"])
      digits = argToBoolean(args["Digits"])
      length = set_length(arg_to_number(args["Length"], required=True))

      characters = set_characters("", digits, lowercase, punctuation, uppercase)

      results = create_password(characters, length)
      return_results(results)


  if __name__ == "__builtin__" or __name__ == "builtins":
      main()

  register_module_line('GenerateRandomString', 'end', __line__())
type: python
subtype: python3
tags: []
enabled: true
args:
- name: Length
  required: true
  description: Length of the string. Maximum is 10,000.
- name: Punctuation
  required: true
  auto: PREDEFINED
  predefined:
  - 'True'
  - 'False'
  description: If the string will include punctuation.
- name: Lowercase
  required: true
  auto: PREDEFINED
  predefined:
  - 'True'
  - 'False'
  description: If the string will include letters.
- name: Uppercase
  description: if uppercase should be included
  required: true
  auto: PREDEFINED
  predefined:
  - 'True'
  - 'False'
- name: Digits
  required: true
  description: If digits should be included
  auto: PREDEFINED
  predefined:
  - 'True'
  - 'False'
outputs:
- contextPath: RandomString
  description: The generated string.
  type: string
scripttarget: 0
tests:
- RandomStringGenerateTest
fromversion: 6.2.0
dockerimage: demisto/python3:3.11.10.113941
nativeimage:
- '8.8'
- '8.6'
