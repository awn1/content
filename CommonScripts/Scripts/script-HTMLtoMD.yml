args:
- default: true
  description: HTML to convert to Markdown.
  name: html
  required: true
comment: Converts HTML to Markdown.
commonfields:
  id: HTMLtoMD
  version: -1
enabled: true
name: HTMLtoMD
outputs:
- contextPath: HTMLtoMD.Original
  description: The original HTML that was converted to Markdown.
  type: String
- contextPath: HTMLtoMD.Result
  description: The Markdown that was converted from the passed HTML.
  type: String
script: >
  register_module_line('HTMLtoMD', 'start', __line__())

  demisto.debug('pack name = Common Scripts, pack version = 1.19.29')



  from markdownify import markdownify as md



  def html_to_md_command(args):
      """
      Converts HTML to MD formatted string.
      :type args: ``dict``
      :param args: Demisto args object.

      :rtype: ``tuple``
      :return: Tuple of Demisto response parts.
      """
      html = str(args.get('html', ''))
      markdown = md(html)
      result = {
          "Original": html,
          "Result": str(markdown)
      }
      outputs = {
          "HTMLtoMD(val.Original == obj.Original)": result
      }
      return result, markdown, outputs


  def main():
      try:
          args = demisto.args()
          result, markdown, outputs = html_to_md_command(args)
          demisto.results({
              'Type': entryTypes['note'],
              'ContentsFormat': formats['markdown'],
              'Contents': result,
              'HumanReadable': markdown,
              'EntryContext': outputs
          })
      except Exception as expt:
          return_error(f'Failed to execute HTMLtoMD script. Error: {str(expt)}')


  if __name__ in ('__main__', '__builtin__', 'builtins'):
      main()

  register_module_line('HTMLtoMD', 'end', __line__())
timeout: '0'
type: python
tags: []
dockerimage: demisto/btfl-soup:1.0.1.115405
runas: DBotWeakRole
subtype: python3
tests:
- Test_HTMLtoMD
fromversion: 5.0.0
