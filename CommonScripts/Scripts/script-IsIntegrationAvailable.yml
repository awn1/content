commonfields:
  id: IsIntegrationAvailable
  version: -1
name: IsIntegrationAvailable
script: >
  // pack version: 1.19.29

  function isIntegrationAvailable(brandName, allInstances) {
      const brandInstances = Object.keys(allInstances).filter(
          instanceName => 
          allInstances[instanceName].brand.toLowerCase() === brandName.toLowerCase() &&
          allInstances[instanceName].state === 'active'
      );
    
      const readableOutput = brandInstances.length > 0 ? 'yes' : 'no';

      return {
          'Type': entryTypes['note'],
          'ContentsFormat': formats['text'],
          'Contents': readableOutput,
          'HumanReadable': readableOutput,
          'EntryContext': {'brandInstances': brandInstances}
      };
  }



  function main() {
      const brandNames = argToList(args.brandname);
      const allInstances = getModules();

      const results = [];
      for (let brandName of brandNames) {
          const result = isIntegrationAvailable(brandName, allInstances);
          results.push(result);
      }

      return results;
  }



  try {
      return main();
  } catch (error) {
      throw `Failed to execute automation. Error:\n${error}`;
  }
type: javascript
tags:
- infra
- Condition
comment: Returns 'yes' if integration brand is available. Otherwise returns 'no'.
system: true
args:
- name: brandname
  description: Integration's brand name to query.
  required: true
  default: true
  isArray: true
scripttarget: 0
dependson: {}
timeout: 0s
outputs:
- contextPath: yes
  description: if integration is available.
- contextPath: no
  description: if there is no instance for the given brand.
fromversion: 5.0.0
tests:
- IsIntegrationAvailable - Test
